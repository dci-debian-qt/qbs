Description: remove all endianness-related code
Origin: upstream, http://code.qt.io/cgit/qt-labs/qbs.git/commit?id=6c7df8f7c6b3070f
Last-Update: 2015-03-08

--- a/doc/reference/modules/qbs-module.qdoc
+++ b/doc/reference/modules/qbs-module.qdoc
@@ -218,17 +218,6 @@
     Currently used values are: \c{"x86"}, \c{"x86_64"} and \c{"arm"}.
 
 
-    \section1 endianness
-
-    \table
-    \row    \li \b{Type:}            \li \c{string}
-    \row    \li \b{Allowed Values:}  \li \c{"big"}, \c{"little"}, \c{"mixed"}
-    \row    \li \b{Default:}         \li \c{undefined}
-    \endtable
-
-    Specifies the endianness of the target platform's processor architecture.
-
-
     \section1 toolchain
 
     \table
--- a/share/qbs/modules/qbs/common.qbs
+++ b/share/qbs/modules/qbs/common.qbs
@@ -38,18 +38,6 @@
     property string profile
     property stringList toolchain
     property string architecture
-
-    property string endianness: {
-        if (["x86", "x86_64"].contains(architecture))
-            return "little";
-    }
-
-    PropertyOptions {
-        name: "endianness"
-        allowedValues: ["big", "little", "mixed"]
-        description: "endianness of the target platform"
-    }
-
     property bool install: false
     property string installDir
     property string installPrefix: ""
@@ -92,12 +80,6 @@
         }, "'" + architecture + "' is invalid. You must use the canonical name '" +
         canonicalArchitecture(architecture) + "'");
 
-        validator.addCustomValidator("endianness", endianness, function (value) {
-            if (value === undefined)
-                return true;
-            return ["big", "little", "mixed"].indexOf(value) !== -1;
-        }, "must be in [big, little, mixed]");
-
         validator.validate();
     }
 }
--- a/src/app/qbs-setup-toolchains/msvcprobe.cpp
+++ b/src/app/qbs-setup-toolchains/msvcprobe.cpp
@@ -71,7 +71,6 @@
     p.setValue(QLatin1String("cpp.toolchainInstallPath"), installPath);
     p.setValue(QLatin1String("qbs.toolchain"), QStringList(QLatin1String("msvc")));
     p.setValue(QLatin1String("qbs.architecture"), canonicalArchitecture(architecture));
-    p.setValue(QLatin1String("qbs.endianness"), defaultEndianness(architecture));
     if (msvc.version.toInt() >= 2013) {
         const QStringList flags(QLatin1String("/FS"));
         p.setValue(QLatin1String("cpp.platformCFlags"), flags);
--- a/src/app/qbs-setup-toolchains/probe.cpp
+++ b/src/app/qbs-setup-toolchains/probe.cpp
@@ -161,7 +161,6 @@
     profile.setValue(QLatin1String("cpp.compilerName"), cfi.fileName());
     profile.setValue(QLatin1String("qbs.toolchain"), toolchainTypes);
     profile.setValue(QLatin1String("qbs.architecture"), canonicalArchitecture(architecture));
-    profile.setValue(QLatin1String("qbs.endianness"), defaultEndianness(architecture));
     setupCompilerPathByLanguage(profile, toolchainTypes, toolchainInstallPath, toolchainPrefix);
 }
 
--- a/src/app/qbs-setup-toolchains/xcodeprobe.cpp
+++ b/src/app/qbs-setup-toolchains/xcodeprobe.cpp
@@ -139,7 +139,7 @@
         profile->setValue(QLatin1String("cpp.platformCommonCompilerFlags"), extraFlags);
         profile->setValue(QLatin1String("cpp.platformLinkerFlags"), extraFlags);
     }
-    // setting architecture and endianness only here, bercause the same compiler
+    // setting architecture only here, bercause the same compiler
     // can support several ones
     QStringList flags(extraFlags);
     flags << QLatin1String("-dumpmachine");
@@ -160,7 +160,6 @@
                         "        arch: %4").arg(profile->name(), pathToGcc, compilerTriplet,
                                             architecture);
 
-    profile->setValue(QLatin1String("qbs.endianness"), defaultEndianness(architecture));
     profile->setValue(QLatin1String("qbs.architecture"), canonicalArchitecture(architecture));
 }
 
--- a/src/lib/corelib/language/testdata/productconditions.qbs
+++ b/src/lib/corelib/language/testdata/productconditions.qbs
@@ -14,6 +14,6 @@
     }
     Product {
         name: "product_condition_dependent_of_module"
-        condition: qbs.endianness !== (qbs.endianness + "foo")
+        condition: qbs.architecture !== (qbs.architecture + "foo")
     }
 }
--- a/src/lib/corelib/tools/architectures.cpp
+++ b/src/lib/corelib/tools/architectures.cpp
@@ -82,27 +82,4 @@
 
 }
 
-QString defaultEndianness(const QString &architecture)
-{
-    const QString canonicalArch = canonicalArchitecture(architecture);
-
-    QStringList little = QStringList()
-            << QLatin1String("x86")
-            << QLatin1String("x86_64")
-            << QLatin1String("arm")
-            << QLatin1String("arm64");
-
-    if (little.contains(canonicalArch))
-        return QLatin1String("little");
-
-    QStringList big = QStringList()
-            << QLatin1String("ppc")
-            << QLatin1String("ppc64");
-
-    if (big.contains(canonicalArch))
-        return QLatin1String("big");
-
-    return QString();
-}
-
 } // namespace qbs
--- a/src/lib/corelib/tools/architectures.h
+++ b/src/lib/corelib/tools/architectures.h
@@ -35,7 +35,6 @@
 namespace qbs {
 
 QBS_EXPORT QString canonicalArchitecture(const QString &architecture);
-QBS_EXPORT QString defaultEndianness(const QString &architecture);
 
 } // namespace qbs
 
